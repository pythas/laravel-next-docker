services:
  backend:
    image: ${DOCKER_REGISTRY?}/${DOCKER_NAMESPACE?}/backend-${ENV?}:${TAG?}
    build:
      context: ./
      dockerfile: ./images/backend/Dockerfile
      target: ${ENV?}
      args:
        - BASE_IMAGE=${DOCKER_REGISTRY?}/${DOCKER_NAMESPACE?}/php-base-${ENV?}:${TAG?}
    container_name: backend-${ENV}
    links:
      - mysql
      - redis
    hostname: backend
    networks:
      - backend
      - proxy
    restart: unless-stopped
  
  queue:
    image: ${DOCKER_REGISTRY?}/${DOCKER_NAMESPACE?}/queue-${ENV?}:${TAG?}
    build:
      context: ./
      dockerfile: ./images/queue/Dockerfile
      target: ${ENV?}
      args:
        - BASE_IMAGE=${DOCKER_REGISTRY?}/${DOCKER_NAMESPACE?}/php-base-${ENV?}:${TAG?}
    container_name: queue-${ENV}
    links:
      - mysql
      - redis
    networks:
      - backend

  schedule:
    image: ${DOCKER_REGISTRY?}/${DOCKER_NAMESPACE?}/schedule-${ENV?}:${TAG?}
    build:
      context: ./
      dockerfile: ./images/schedule/Dockerfile
      target: ${ENV?}
      args:
        - BASE_IMAGE=${DOCKER_REGISTRY?}/${DOCKER_NAMESPACE?}/php-base-${ENV?}:${TAG?}
    container_name: schedule-${ENV}
    links:
      - mysql
      - redis
    networks:
      - backend
  
  mysql:
    image: mysql:latest
    container_name: mysql-${ENV}
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis-${ENV}
    volumes:
      - ./data/redis:/data
    networks:
      - backend

networks:
  backend:
    name: backend

  proxy:
    name: proxy
    external: true